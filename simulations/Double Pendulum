<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Double Pendulum Simulator</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
            background-color: #f5f5f5;
        }

        .controls-container {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 20px;
            margin-bottom: 20px;
        }

        .card {
            background: white;
            border-radius: 8px;
            padding: 20px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }

        .card-title {
            font-size: 1.2em;
            font-weight: bold;
            margin-bottom: 15px;
            color: #333;
        }

        .control-group {
            margin-bottom: 15px;
        }

        .label {
            display: block;
            margin-bottom: 5px;
            font-size: 0.9em;
            color: #666;
        }

        .slider-container {
            display: flex;
            align-items: center;
            gap: 10px;
        }

        input[type="range"] {
            flex-grow: 1;
        }

        .value-display {
            min-width: 60px;
            text-align: right;
            font-family: monospace;
        }

        canvas {
            display: block;
            margin: 20px auto;
            background: white;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }

        .button {
            background: #4a90e2;
            color: white;
            border: none;
            padding: 10px 20px;
            border-radius: 4px;
            cursor: pointer;
            font-size: 1em;
        }

        .button:hover {
            background: #357abd;
        }

        .button.pause {
            background: #e24a4a;
        }

        .button.pause:hover {
            background: #bd3535;
        }

        .bottom-controls {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
        }

        #energyDisplay {
            font-size: 0.9em;
            color: #666;
        }
    </style>
</head>
<body>
    <div class="controls-container">
        <div class="card">
            <div class="card-title">Coupling Parameters</div>
            <div class="control-group">
                <label class="label">Mass Ratio (m₂/m₁): <span id="massRatioDisplay"></span></label>
                <input type="range" id="massRatio" min="-2.3" max="2.3" step="0.1" value="0">
            </div>
            <div class="control-group">
                <label class="label">Length Ratio (l₂/l₁): <span id="lengthRatioDisplay"></span></label>
                <input type="range" id="lengthRatio" min="-2.3" max="2.3" step="0.1" value="0">
            </div>
        </div>
        
        <div class="card">
            <div class="card-title">Initial Conditions</div>
            <div class="control-group">
                <label class="label">θ₁ (degrees): <span id="theta1Display"></span></label>
                <input type="range" id="theta1" min="-180" max="180" step="5" value="90">
            </div>
            <div class="control-group">
                <label class="label">θ₂ (degrees): <span id="theta2Display"></span></label>
                <input type="range" id="theta2" min="-180" max="180" step="5" value="90">
            </div>
            <div class="control-group">
                <label class="label">ω₁ (rad/s): <span id="omega1Display"></span></label>
                <input type="range" id="omega1" min="-5" max="5" step="0.1" value="0">
            </div>
            <div class="control-group">
                <label class="label">ω₂ (rad/s): <span id="omega2Display"></span></label>
                <input type="range" id="omega2" min="-5" max="5" step="0.1" value="0">
            </div>
        </div>
    </div>

    <div class="bottom-controls">
        <div id="energyDisplay">Total Energy: 0.00 J</div>
        <button id="pauseButton" class="button">Pause</button>
    </div>

    <canvas id="pendulumCanvas" width="600" height="600"></canvas>

<script>
// Beginning of JavaScript - continued in part 2
const canvas = document.getElementById('pendulumCanvas');
const ctx = canvas.getContext('2d');

// State variables
let isRunning = true;
let trail = [];

// Physical parameters
const g = 9.81;
const m1 = 1.0;
const l1 = 1.0;

// Get all input elements
const massRatioInput = document.getElementById('massRatio');
const lengthRatioInput = document.getElementById('lengthRatio');
const theta1Input = document.getElementById('theta1');
const theta2Input = document.getElementById('theta2');
const omega1Input = document.getElementById('omega1');
const omega2Input = document.getElementById('omega2');
const pauseButton = document.getElementById('pauseButton');

// Get all display elements
const massRatioDisplay = document.getElementById('massRatioDisplay');
const lengthRatioDisplay = document.getElementById('lengthRatioDisplay');
const theta1Display = document.getElementById('theta1Display');
const theta2Display = document.getElementById('theta2Display');
const omega1Display = document.getElementById('omega1Display');
const omega2Display = document.getElementById('omega2Display');
const energyDisplay = document.getElementById('energyDisplay');

// Current state
let state = {
    theta1: Math.PI/2,
    omega1: 0,
    theta2: Math.PI/2,
    omega2: 0
};

// Conversion functions
const deg2rad = deg => deg * Math.PI / 180;
const rad2deg = rad => rad * 180 / Math.PI;

// Physics calculations
function calculateDerivatives(state, massRatio, lengthRatio) {
    const m2 = m1 * Math.exp(massRatio);
    const l2 = l1 * Math.exp(lengthRatio);
    
    const delta = state.theta2 - state.theta1;
    const den = (m1 + m2) * l1 - m2 * l1 * Math.cos(delta) * Math.cos(delta);
    
    const theta1_dot = state.omega1;
    const omega1_dot = (m2 * l1 * state.omega1 * state.omega1 * Math.sin(delta) * Math.cos(delta)
                     + m2 * g * Math.sin(state.theta2) * Math.cos(delta)
                     + m2 * l2 * state.omega2 * state.omega2 * Math.sin(delta)
                     - (m1 + m2) * g * Math.sin(state.theta1)) / den;
    
    const theta2_dot = state.omega2;
    const omega2_dot = (-m2 * l2 * state.omega2 * state.omega2 * Math.sin(delta) * Math.cos(delta)
                     + (m1 + m2) * (g * Math.sin(state.theta1) * Math.cos(delta)
                     - l1 * state.omega1 * state.omega1 * Math.sin(delta)
                     - g * Math.sin(state.theta2))) / den;
    
    return {
        theta1: theta1_dot,
        omega1: omega1_dot,
        theta2: theta2_dot,
        omega2: omega2_dot
    };
}

function calculateTotalEnergy(state, massRatio, lengthRatio) {
    const m2 = m1 * Math.exp(massRatio);
    const l2 = l1 * Math.exp(lengthRatio);
    
    const v1x = l1 * state.omega1 * Math.cos(state.theta1);
    const v1y = l1 * state.omega1 * Math.sin(state.theta1);
    const v2x = l1 * state.omega1 * Math.cos(state.theta1) + l2 * state.omega2 * Math.cos(state.theta2);
    const v2y = l1 * state.omega1 * Math.sin(state.theta1) + l2 * state.omega2 * Math.sin(state.theta2);
    
    const T = 0.5 * m1 * (v1x*v1x + v1y*v1y) + 0.5 * m2 * (v2x*v2x + v2y*v2y);
    const V = -m1 * g * l1 * Math.cos(state.theta1) - m2 * g * (l1 * Math.cos(state.theta1) + l2 * Math.cos(state.theta2));
    
    return T + V;
}

// RK4 integrator
function rk4Step(state, dt, massRatio, lengthRatio) {
    const k1 = calculateDerivatives(state, massRatio, lengthRatio);
    
    const halfState = {
        theta1: state.theta1 + k1.theta1 * dt/2,
        omega1: state.omega1 + k1.omega1 * dt/2,
        theta2: state.theta2 + k1.theta2 * dt/2,
        omega2: state.omega2 + k1.omega2 * dt/2
    };
    const k2 = calculateDerivatives(halfState, massRatio, lengthRatio);
    
    const halfState2 = {
        theta1: state.theta1 + k2.theta1 * dt/2,
        omega1: state.omega1 + k2.omega1 * dt/2,
        theta2: state.theta2 + k2.theta2 * dt/2,
        omega2: state.omega2 + k2.omega2 * dt/2
    };
    const k3 = calculateDerivatives(halfState2, massRatio, lengthRatio);
    
    const fullState = {
        theta1: state.theta1 + k3.theta1 * dt,
        omega1: state.omega1 + k3.omega1 * dt,
        theta2: state.theta2 + k3.theta2 * dt,
        omega2: state.omega2 + k3.omega2 * dt
    };
    const k4 = calculateDerivatives(fullState, massRatio, lengthRatio);
    
    return {
        theta1: state.theta1 + (k1.theta1 + 2*k2.theta1 + 2*k3.theta1 + k4.theta1) * dt/6,
        omega1: state.omega1 + (k1.omega1 + 2*k2.omega1 + 2*k3.omega1 + k4.omega1) * dt/6,
        theta2: state.theta2 + (k1.theta2 + 2*k2.theta2 + 2*k3.theta2 + k4.theta2) * dt/6,
        omega2: state.omega2 + (k1.omega2 + 2*k2.omega2 + 2*k3.omega2 + k4.omega2) * dt/6
    };
}

// Drawing functions
function drawProtractor(ctx, centerX, centerY, scale) {
    const protractorRadius = scale * 1.2;
    
    ctx.strokeStyle = 'rgba(100, 100, 100, 0.15)';
    ctx.fillStyle = 'rgba(100, 100, 100, 0.5)';
    ctx.textAlign = 'center';
    ctx.textBaseline = 'middle';
    ctx.font = 'bold 14px Arial';
    
    for (let angle = 0; angle < 360; angle += 30) {
        const radian = (angle * Math.PI) / 180;
        const lineLength = angle % 90 === 0 ? protractorRadius : 
                          angle % 45 === 0 ? protractorRadius * 0.9 : 
                          protractorRadius * 0.85;
        
        ctx.beginPath();
        ctx.moveTo(centerX, centerY);
        ctx.lineTo(
            centerX + lineLength * Math.sin(radian),
            centerY + lineLength * Math.cos(radian)
        );
        ctx.stroke();
        
        if (angle % 30 === 0) {
            const labelRadius = protractorRadius * 1.15;
            const labelX = centerX + labelRadius * Math.sin(radian);
            const labelY = centerY + labelRadius * Math.cos(radian);
            ctx.fillText(`${angle}°`, labelX, labelY);
        }
    }
    
    ctx.fillStyle = 'rgba(100, 100, 100, 0.3)';
    ctx.beginPath();
    ctx.arc(centerX, centerY, 3, 0, 2 * Math.PI);
    ctx.fill();
}

function updateDisplay() {
    const massRatio = Math.exp(Number(massRatioInput.value));
    const lengthRatio = Math.exp(Number(lengthRatioInput.value));
    
    massRatioDisplay.textContent = massRatio < 1 ? 
        `1/${(1/massRatio).toFixed(3)}` : 
        massRatio.toFixed(3);
    
    lengthRatioDisplay.textContent = lengthRatio < 1 ? 
        `1/${(1/lengthRatio).toFixed(3)}` : 
        lengthRatio.toFixed(3);
    
    theta1Display.textContent = `${Number(theta1Input.value).toFixed(1)}°`;
    theta2Display.textContent = `${Number(theta2Input.value).toFixed(1)}°`;
    omega1Display.textContent = Number(omega1Input.value).toFixed(2);
    omega2Display.textContent = Number(omega2Input.value).toFixed(2);
    
    state.theta1 = deg2rad(Number(theta1Input.value));
    state.theta2 = deg2rad(Number(theta2Input.value));
    state.omega1 = Number(omega1Input.value);
    state.omega2 = Number(omega2Input.value);
    
    const energy = calculateTotalEnergy(state, Number(massRatioInput.value), Number(lengthRatioInput.value));
    energyDisplay.textContent = `Total Energy: ${energy.toFixed(2)} J`;
}

function draw() {
    const scale = 100;
    const centerX = canvas.width / 2;
    const centerY = canvas.height / 2;
    
    ctx.clearRect(0, 0, canvas.width, canvas.height);
    drawProtractor(ctx, centerX, centerY, scale);
    
    const massRatio = Math.exp(Number(massRatioInput.value));
    const lengthRatio = Math.exp(Number(lengthRatioInput.value));
    const l2 = l1 * lengthRatio;
    
    // Draw trail
    ctx.beginPath();
    trail.forEach((pos, i) => {
        const alpha = i / trail.length;
        ctx.strokeStyle = `rgba(74, 144, 226, ${alpha * 0.3})`;
        ctx.beginPath();
        ctx.arc(pos.x, pos.y, 2, 0, 2*Math.PI);
        ctx.stroke();
    });
    
    // Calculate positions
    const x1 = centerX + l1 * scale * Math.sin(state.theta1);
    const y1 = centerY + l1 * scale * Math.cos(state.theta1);
    const x2 = x1 + l2 * scale * Math.sin(state.theta2);
    const y2 = y1 + l2 * scale * Math.cos(state.theta2);
    
    // Draw rods
    ctx.beginPath();
    ctx.strokeStyle = '#666';
    ctx.lineWidth = 2;
    ctx.moveTo(centerX, centerY);
    ctx.lineTo(x1, y1);
    ctx.lineTo(x2, y2);
    ctx.stroke();
    
    // Draw masses
    const baseRadius = 8;
    ctx.fillStyle = '#4a90e2';
    ctx.beginPath();
    ctx.arc(x1, y1, baseRadius, 0, 2*Math.PI);
    ctx.fill();
    ctx.beginPath();
    ctx.arc(x2, y2, baseRadius * Math.sqrt(massRatio), 0, 2*Math.PI);
    ctx.fill();
    
    // Update trail
    trail.push({x: x2, y: y2});
    if (trail.length > 50) trail.shift();
    
    if (isRunning) {
        state = rk4Step(state, 1/60, Number(massRatioInput.value), Number(lengthRatioInput.value));
        requestAnimationFrame(draw);
    }
}

// Event handlers
[massRatioInput, lengthRatioInput, theta1Input, theta2Input, omega1Input, omega2Input].forEach(input => {
    input.addEventListener('input', updateDisplay);
});

pauseButton.addEventListener('click', () => {
    isRunning = !isRunning;
    pauseButton.textContent = isRunning ? 'Pause' : 'Resume';
    pauseButton.classList.toggle('pause', isRunning);
    if (isRunning) draw();
});

// Initial setup
updateDisplay();
draw();

</script>
</body>
</html>
